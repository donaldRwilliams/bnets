
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_hs_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_hs");
    reader.add_event(50, 50, "end", "model_hs");
    return reader;
}

class model_hs : public prob_grad {
private:
    int N;
    int K;
    matrix_d X;
    double scale_global;
    double nu_global;
    double nu_local;
    double slab_scale;
    double slab_df;
    vector<vector<int> > index;
public:
    model_hs(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_hs(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_hs_namespace::model_hs";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "scale_global", "double", context__.to_vec());
        scale_global = double(0);
        vals_r__ = context__.vals_r("scale_global");
        pos__ = 0;
        scale_global = vals_r__[pos__++];
        context__.validate_dims("data initialization", "nu_global", "double", context__.to_vec());
        nu_global = double(0);
        vals_r__ = context__.vals_r("nu_global");
        pos__ = 0;
        nu_global = vals_r__[pos__++];
        context__.validate_dims("data initialization", "nu_local", "double", context__.to_vec());
        nu_local = double(0);
        vals_r__ = context__.vals_r("nu_local");
        pos__ = 0;
        nu_local = vals_r__[pos__++];
        context__.validate_dims("data initialization", "slab_scale", "double", context__.to_vec());
        slab_scale = double(0);
        vals_r__ = context__.vals_r("slab_scale");
        pos__ = 0;
        slab_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "slab_df", "double", context__.to_vec());
        slab_df = double(0);
        vals_r__ = context__.vals_r("slab_df");
        pos__ = 0;
        slab_df = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"scale_global",scale_global,0);
        check_greater_or_equal(function__,"nu_global",nu_global,1);
        check_greater_or_equal(function__,"nu_local",nu_local,1);
        check_greater_or_equal(function__,"slab_scale",slab_scale,0);
        check_greater_or_equal(function__,"slab_df",slab_df,0);
        // initialize data variables
        validate_non_negative_index("index", "K", K);
        validate_non_negative_index("index", "(K - 1)", (K - 1));
        index = std::vector<std::vector<int> >(K,std::vector<int>((K - 1),int(0)));
        stan::math::fill(index, std::numeric_limits<int>::min());

        try {
            for (int k = 1; k <= K; ++k) {
                {
                    int displace(0);
                    (void) displace;  // dummy to suppress unused var warning

                    stan::math::fill(displace, std::numeric_limits<int>::min());
                    stan::math::assign(displace,0);


                    for (int j = 1; j <= (K - 1); ++j) {

                        if (as_bool(logical_eq(j,k))) {

                            stan::math::assign(displace, 1);
                        }
                        stan::math::assign(get_base1_lhs(get_base1_lhs(index,k,"index",1),j,"index",2), (j + displace));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("b", "(K - 1)", (K - 1));
        validate_non_negative_index("b", "K", K);
        num_params_r__ += (K - 1) * K;
        validate_non_negative_index("b_int", "K", K);
        num_params_r__ += K;
        validate_non_negative_index("sigma", "K", K);
        num_params_r__ += K;
        ++num_params_r__;
        validate_non_negative_index("lambda", "K", K);
        num_params_r__ += K;
        ++num_params_r__;
    }

    ~model_hs() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        validate_non_negative_index("b", "K", K);
        validate_non_negative_index("b", "(K - 1)", (K - 1));
        context__.validate_dims("initialization", "b", "vector_d", context__.to_vec(K,(K - 1)));
        // generate_declaration b
        std::vector<vector_d> b(K,vector_d(static_cast<Eigen::VectorXd::Index>((K - 1))));
        for (int j1__ = 0U; j1__ < (K - 1); ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                b[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.vector_unconstrain(b[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("b_int")))
            throw std::runtime_error("variable b_int missing");
        vals_r__ = context__.vals_r("b_int");
        pos__ = 0U;
        validate_non_negative_index("b_int", "K", K);
        context__.validate_dims("initialization", "b_int", "vector_d", context__.to_vec(K));
        // generate_declaration b_int
        vector_d b_int(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            b_int(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b_int);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b_int: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "K", K);
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(K));
        // generate_declaration sigma
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        // generate_declaration tau
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "K", K);
        context__.validate_dims("initialization", "lambda", "vector_d", context__.to_vec(K));
        // generate_declaration lambda
        vector_d lambda(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            lambda(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        if (!(context__.contains_r("caux")))
            throw std::runtime_error("variable caux missing");
        vals_r__ = context__.vals_r("caux");
        pos__ = 0U;
        context__.validate_dims("initialization", "caux", "double", context__.to_vec());
        // generate_declaration caux
        double caux(0);
        caux = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,caux);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable caux: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > b;
        size_t dim_b_0__ = K;
        b.reserve(dim_b_0__);
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            if (jacobian__)
                b.push_back(in__.vector_constrain((K - 1),lp__));
            else
                b.push_back(in__.vector_constrain((K - 1)));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b_int;
        (void) b_int;  // dummy to suppress unused var warning
        if (jacobian__)
            b_int = in__.vector_constrain(K,lp__);
        else
            b_int = in__.vector_constrain(K);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.vector_lb_constrain(0,K,lp__);
        else
            sigma = in__.vector_lb_constrain(0,K);

        T__ tau;
        (void) tau;  // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.scalar_lb_constrain(0,lp__);
        else
            tau = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  lambda;
        (void) lambda;  // dummy to suppress unused var warning
        if (jacobian__)
            lambda = in__.vector_lb_constrain(0,K,lp__);
        else
            lambda = in__.vector_lb_constrain(0,K);

        T__ caux;
        (void) caux;  // dummy to suppress unused var warning
        if (jacobian__)
            caux = in__.scalar_lb_constrain(0,lp__);
        else
            caux = in__.scalar_lb_constrain(0);


        // transformed parameters
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        validate_non_negative_index("beta1", "(K - 1)", (K - 1));
        validate_non_negative_index("beta1", "K", K);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > beta1(K, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((K - 1)))));
        stan::math::initialize(beta1, DUMMY_VAR__);
        stan::math::fill(beta1,DUMMY_VAR__);
        T__ c;
        (void) c;  // dummy to suppress unused var warning

        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c,DUMMY_VAR__);


        try {
            stan::math::assign(c, (slab_scale * sqrt(caux)));
            stan::math::assign(lambda_tilde, sqrt(elt_divide(multiply(pow(c,2),square(lambda)),add(pow(c,2),multiply(pow(tau,2),square(lambda))))));
            for (int k = 1; k <= K; ++k) {

                stan::math::assign(get_base1_lhs(beta1,k,"beta1",1), multiply(multiply(get_base1(b,k,"b",1),get_base1(lambda_tilde,k,"lambda_tilde",1)),tau));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::math::is_uninitialized(lambda_tilde(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: lambda_tilde" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < K; ++i0__) {
            for (int i1__ = 0; i1__ < (K - 1); ++i1__) {
                if (stan::math::is_uninitialized(beta1[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta1" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        if (stan::math::is_uninitialized(c)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: c";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"lambda_tilde",lambda_tilde,0);
        check_greater_or_equal(function__,"c",c,0);

        // model body
        try {

            for (int k = 1; k <= K; ++k) {

                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X"), add(get_base1(b_int,k,"b_int",1),multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(get_base1(index,k,"index",1)), stan::model::nil_index_list())), "X"),get_base1(beta1,k,"beta1",1))), get_base1(sigma,k,"sigma",1)));
                lp_accum__.add(cauchy_log<propto__>(get_base1(sigma,k,"sigma",1), 0, 2));
                lp_accum__.add(cauchy_log<propto__>(get_base1(b_int,k,"b_int",1), 0, 2));
                lp_accum__.add(normal_log<propto__>(get_base1(b,k,"b",1), 0, 1));
                lp_accum__.add(student_t_log<propto__>(lambda, nu_local, 0, 1));
                lp_accum__.add(student_t_log<propto__>(tau, nu_global, 0, multiply(scale_global,sigma)));
                lp_accum__.add(inv_gamma_log<propto__>(caux, (0.5 * slab_df), (0.5 * slab_df)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("b_int");
        names__.push_back("sigma");
        names__.push_back("tau");
        names__.push_back("lambda");
        names__.push_back("caux");
        names__.push_back("lambda_tilde");
        names__.push_back("beta1");
        names__.push_back("c");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_hs_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> b;
        size_t dim_b_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            b.push_back(in__.vector_constrain((K - 1)));
        }
        vector_d b_int = in__.vector_constrain(K);
        vector_d sigma = in__.vector_lb_constrain(0,K);
        double tau = in__.scalar_lb_constrain(0);
        vector_d lambda = in__.vector_lb_constrain(0,K);
        double caux = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < (K - 1); ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(b[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(b_int[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        vars__.push_back(tau);
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
        }
        vars__.push_back(caux);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("lambda_tilde", "K", K);
        vector_d lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        validate_non_negative_index("beta1", "(K - 1)", (K - 1));
        validate_non_negative_index("beta1", "K", K);
        vector<vector_d> beta1(K, (vector_d(static_cast<Eigen::VectorXd::Index>((K - 1)))));
        stan::math::initialize(beta1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(beta1,DUMMY_VAR__);
        double c(0.0);
        (void) c;  // dummy to suppress unused var warning

        stan::math::initialize(c, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(c,DUMMY_VAR__);


        try {
            stan::math::assign(c, (slab_scale * sqrt(caux)));
            stan::math::assign(lambda_tilde, sqrt(elt_divide(multiply(pow(c,2),square(lambda)),add(pow(c,2),multiply(pow(tau,2),square(lambda))))));
            for (int k = 1; k <= K; ++k) {

                stan::math::assign(get_base1_lhs(beta1,k,"beta1",1), multiply(multiply(get_base1(b,k,"b",1),get_base1(lambda_tilde,k,"lambda_tilde",1)),tau));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"lambda_tilde",lambda_tilde,0);
        check_greater_or_equal(function__,"c",c,0);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(lambda_tilde[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < (K - 1); ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(beta1[k_0__][k_1__]);
            }
        }
        vars__.push_back(c);

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_hs";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_int" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "caux";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_tilde" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_int" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "caux";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_tilde" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_lasso_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lasso");
    reader.add_event(33, 33, "end", "model_lasso");
    return reader;
}

class model_lasso : public prob_grad {
private:
    int N;
    int K;
    matrix_d X;
    double lasso_df;
    double lasso_scale;
    vector<vector<int> > index;
public:
    model_lasso(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_lasso(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_lasso_namespace::model_lasso";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "lasso_df", "double", context__.to_vec());
        lasso_df = double(0);
        vals_r__ = context__.vals_r("lasso_df");
        pos__ = 0;
        lasso_df = vals_r__[pos__++];
        context__.validate_dims("data initialization", "lasso_scale", "double", context__.to_vec());
        lasso_scale = double(0);
        vals_r__ = context__.vals_r("lasso_scale");
        pos__ = 0;
        lasso_scale = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"lasso_df",lasso_df,0);
        check_greater_or_equal(function__,"lasso_scale",lasso_scale,0);
        // initialize data variables
        validate_non_negative_index("index", "K", K);
        validate_non_negative_index("index", "(K - 1)", (K - 1));
        index = std::vector<std::vector<int> >(K,std::vector<int>((K - 1),int(0)));
        stan::math::fill(index, std::numeric_limits<int>::min());

        try {
            for (int k = 1; k <= K; ++k) {
                {
                    int displace(0);
                    (void) displace;  // dummy to suppress unused var warning

                    stan::math::fill(displace, std::numeric_limits<int>::min());
                    stan::math::assign(displace,0);


                    for (int j = 1; j <= (K - 1); ++j) {

                        if (as_bool(logical_eq(j,k))) {

                            stan::math::assign(displace, 1);
                        }
                        stan::math::assign(get_base1_lhs(get_base1_lhs(index,k,"index",1),j,"index",2), (j + displace));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("b", "(K - 1)", (K - 1));
        validate_non_negative_index("b", "K", K);
        num_params_r__ += (K - 1) * K;
        validate_non_negative_index("b_int", "K", K);
        num_params_r__ += K;
        validate_non_negative_index("sigma", "K", K);
        num_params_r__ += K;
        ++num_params_r__;
    }

    ~model_lasso() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        validate_non_negative_index("b", "K", K);
        validate_non_negative_index("b", "(K - 1)", (K - 1));
        context__.validate_dims("initialization", "b", "vector_d", context__.to_vec(K,(K - 1)));
        // generate_declaration b
        std::vector<vector_d> b(K,vector_d(static_cast<Eigen::VectorXd::Index>((K - 1))));
        for (int j1__ = 0U; j1__ < (K - 1); ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                b[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.vector_unconstrain(b[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("b_int")))
            throw std::runtime_error("variable b_int missing");
        vals_r__ = context__.vals_r("b_int");
        pos__ = 0U;
        validate_non_negative_index("b_int", "K", K);
        context__.validate_dims("initialization", "b_int", "vector_d", context__.to_vec(K));
        // generate_declaration b_int
        vector_d b_int(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            b_int(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b_int);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b_int: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "K", K);
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(K));
        // generate_declaration sigma
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("lasso_inv_lambda")))
            throw std::runtime_error("variable lasso_inv_lambda missing");
        vals_r__ = context__.vals_r("lasso_inv_lambda");
        pos__ = 0U;
        context__.validate_dims("initialization", "lasso_inv_lambda", "double", context__.to_vec());
        // generate_declaration lasso_inv_lambda
        double lasso_inv_lambda(0);
        lasso_inv_lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,lasso_inv_lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lasso_inv_lambda: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > b;
        size_t dim_b_0__ = K;
        b.reserve(dim_b_0__);
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            if (jacobian__)
                b.push_back(in__.vector_constrain((K - 1),lp__));
            else
                b.push_back(in__.vector_constrain((K - 1)));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b_int;
        (void) b_int;  // dummy to suppress unused var warning
        if (jacobian__)
            b_int = in__.vector_constrain(K,lp__);
        else
            b_int = in__.vector_constrain(K);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.vector_lb_constrain(0,K,lp__);
        else
            sigma = in__.vector_lb_constrain(0,K);

        T__ lasso_inv_lambda;
        (void) lasso_inv_lambda;  // dummy to suppress unused var warning
        if (jacobian__)
            lasso_inv_lambda = in__.scalar_lb_constrain(0,lp__);
        else
            lasso_inv_lambda = in__.scalar_lb_constrain(0);


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            for (int k = 1; k <= K; ++k) {

                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X"), add(get_base1(b_int,k,"b_int",1),multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(get_base1(index,k,"index",1)), stan::model::nil_index_list())), "X"),get_base1(b,k,"b",1))), get_base1(sigma,k,"sigma",1)));
                lp_accum__.add(cauchy_log<propto__>(get_base1(sigma,k,"sigma",1), 0, 2));
                lp_accum__.add(cauchy_log<propto__>(get_base1(b_int,k,"b_int",1), 0, 2));
                lp_accum__.add(double_exponential_log<propto__>(get_base1(b,k,"b",1), 0, (lasso_scale * lasso_inv_lambda)));
                lp_accum__.add(chi_square_log<propto__>(lasso_inv_lambda, lasso_df));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("b_int");
        names__.push_back("sigma");
        names__.push_back("lasso_inv_lambda");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_lasso_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> b;
        size_t dim_b_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            b.push_back(in__.vector_constrain((K - 1)));
        }
        vector_d b_int = in__.vector_constrain(K);
        vector_d sigma = in__.vector_lb_constrain(0,K);
        double lasso_inv_lambda = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < (K - 1); ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(b[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(b_int[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        vars__.push_back(lasso_inv_lambda);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_lasso";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_int" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lasso_inv_lambda";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_int" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lasso_inv_lambda";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_ridge_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ridge");
    reader.add_event(30, 30, "end", "model_ridge");
    return reader;
}

class model_ridge : public prob_grad {
private:
    int N;
    int K;
    matrix_d X;
    double prior_scale;
    vector<vector<int> > index;
public:
    model_ridge(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_ridge(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_ridge_namespace::model_ridge";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "prior_scale", "double", context__.to_vec());
        prior_scale = double(0);
        vals_r__ = context__.vals_r("prior_scale");
        pos__ = 0;
        prior_scale = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"prior_scale",prior_scale,0);
        // initialize data variables
        validate_non_negative_index("index", "K", K);
        validate_non_negative_index("index", "(K - 1)", (K - 1));
        index = std::vector<std::vector<int> >(K,std::vector<int>((K - 1),int(0)));
        stan::math::fill(index, std::numeric_limits<int>::min());

        try {
            for (int k = 1; k <= K; ++k) {
                {
                    int displace(0);
                    (void) displace;  // dummy to suppress unused var warning

                    stan::math::fill(displace, std::numeric_limits<int>::min());
                    stan::math::assign(displace,0);


                    for (int j = 1; j <= (K - 1); ++j) {

                        if (as_bool(logical_eq(j,k))) {

                            stan::math::assign(displace, 1);
                        }
                        stan::math::assign(get_base1_lhs(get_base1_lhs(index,k,"index",1),j,"index",2), (j + displace));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("b", "(K - 1)", (K - 1));
        validate_non_negative_index("b", "K", K);
        num_params_r__ += (K - 1) * K;
        validate_non_negative_index("b_int", "K", K);
        num_params_r__ += K;
        validate_non_negative_index("sigma", "K", K);
        num_params_r__ += K;
    }

    ~model_ridge() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        validate_non_negative_index("b", "K", K);
        validate_non_negative_index("b", "(K - 1)", (K - 1));
        context__.validate_dims("initialization", "b", "vector_d", context__.to_vec(K,(K - 1)));
        // generate_declaration b
        std::vector<vector_d> b(K,vector_d(static_cast<Eigen::VectorXd::Index>((K - 1))));
        for (int j1__ = 0U; j1__ < (K - 1); ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                b[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.vector_unconstrain(b[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("b_int")))
            throw std::runtime_error("variable b_int missing");
        vals_r__ = context__.vals_r("b_int");
        pos__ = 0U;
        validate_non_negative_index("b_int", "K", K);
        context__.validate_dims("initialization", "b_int", "vector_d", context__.to_vec(K));
        // generate_declaration b_int
        vector_d b_int(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            b_int(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b_int);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b_int: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "K", K);
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(K));
        // generate_declaration sigma
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > b;
        size_t dim_b_0__ = K;
        b.reserve(dim_b_0__);
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            if (jacobian__)
                b.push_back(in__.vector_constrain((K - 1),lp__));
            else
                b.push_back(in__.vector_constrain((K - 1)));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b_int;
        (void) b_int;  // dummy to suppress unused var warning
        if (jacobian__)
            b_int = in__.vector_constrain(K,lp__);
        else
            b_int = in__.vector_constrain(K);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.vector_lb_constrain(0,K,lp__);
        else
            sigma = in__.vector_lb_constrain(0,K);


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            for (int k = 1; k <= K; ++k) {

                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X"), add(get_base1(b_int,k,"b_int",1),multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(get_base1(index,k,"index",1)), stan::model::nil_index_list())), "X"),get_base1(b,k,"b",1))), get_base1(sigma,k,"sigma",1)));
                lp_accum__.add(cauchy_log<propto__>(get_base1(sigma,k,"sigma",1), 0, 2));
                lp_accum__.add(cauchy_log<propto__>(get_base1(b_int,k,"b_int",1), 0, 2));
                lp_accum__.add(normal_log<propto__>(get_base1(b,k,"b",1), 0, prior_scale));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("b_int");
        names__.push_back("sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_ridge_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> b;
        size_t dim_b_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            b.push_back(in__.vector_constrain((K - 1)));
        }
        vector_d b_int = in__.vector_constrain(K);
        vector_d sigma = in__.vector_lb_constrain(0,K);
        for (int k_1__ = 0; k_1__ < (K - 1); ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(b[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(b_int[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_ridge";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_int" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (K - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_int" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

}




#endif
